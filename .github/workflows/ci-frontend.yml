name: Frontend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/ci-frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/ci-frontend.yml'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml

    - name: Install dependencies
      run: |
        cd frontend
        pnpm install --frozen-lockfile

    - name: Lint code
      run: |
        cd frontend
        pnpm run lint

    - name: Type check
      run: |
        cd frontend
        pnpm tsc --noEmit

    - name: Run tests
      run: |
        cd frontend
        pnpm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: true

    - name: Build application
      run: |
        cd frontend
        pnpm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: frontend/dist/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml

    - name: Install dependencies
      run: |
        cd frontend
        pnpm install --frozen-lockfile

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=moderate

    - name: Run dependency check
      run: |
        cd frontend
        npx audit-ci --moderate

  build-docker:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -f infra/docker/Dockerfile.frontend -t telegram-automation-frontend:test .

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-frontend -p 3000:80 telegram-automation-frontend:test
        sleep 10
        curl -f http://localhost:3000 || exit 1
        docker stop test-frontend

  lighthouse:
    runs-on: ubuntu-latest
    needs: [build-docker]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli

    - name: Build and start application
      run: |
        cd frontend
        pnpm install --frozen-lockfile
        pnpm run build
        npx serve -s dist -p 3000 &
        sleep 10

    - name: Run Lighthouse CI
      run: |
        lhci autorun --upload.target=temporary-public-storage
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

