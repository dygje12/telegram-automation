{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Telegram Automation Documentation Selamat datang di dokumentasi Telegram Automation! Aplikasi ini memungkinkan Anda untuk mengirim pesan otomatis ke grup-grup Telegram dengan penjadwalan yang fleksibel. Fitur Utama Manajemen Pesan : Buat dan kelola template pesan yang akan dikirim Manajemen Grup : Kelola daftar grup Telegram target Penjadwalan : Atur jadwal pengiriman pesan secara otomatis Blacklist : Kelola daftar grup yang dikecualikan dari pengiriman Autentikasi : Sistem login yang aman untuk mengakses aplikasi Arsitektur Aplikasi Aplikasi ini terdiri dari dua komponen utama: Backend (FastAPI) : API server yang menangani logika bisnis dan database Frontend (React) : Antarmuka pengguna untuk mengelola aplikasi Dokumentasi Installation - Panduan instalasi dan setup Usage - Panduan penggunaan aplikasi Backend API Docs - Dokumentasi API backend yang detail Keamanan Aplikasi ini dirancang dengan mempertimbangkan keamanan data dan langkah-langkah anti-spam. Informasi lebih lanjut mengenai fitur keamanan dan privasi dapat ditemukan di sini. Monitoring Pantau status scheduler, metrik dashboard, dan log pengiriman pesan. Detail mengenai monitoring dan troubleshooting dapat ditemukan di sini. Skema Database Proyek ini menggunakan SQLite sebagai database default. Detail mengenai skema database dapat ditemukan di sini. Troubleshooting Jika Anda mengalami masalah atau membutuhkan bantuan, silakan lihat di sini atau buat issue baru di repositori GitHub. Aplikasi ini dirancang dengan mempertimbangkan keamanan data dan langkah-langkah anti-spam. Fitur keamanan utama meliputi enkripsi api_id , api_hash , dan phone_number pengguna. Untuk meningkatkan keamanan, disarankan untuk mengimplementasikan: Rate Limiting : Menerapkan pembatasan laju pada endpoint API untuk mencegah penyalahgunaan dan serangan brute-force. Validasi Input : Memastikan validasi input yang ketat pada semua endpoint API untuk mencegah serangan injeksi (misalnya, SQL injection, XSS). Two-Factor Authentication (2FA) : Jika aplikasi ini akan digunakan oleh banyak pengguna, pertimbangkan untuk menambahkan 2FA untuk lapisan keamanan tambahan pada proses login. Pengguna bertanggung jawab penuh untuk mematuhi Ketentuan Layanan Telegram dan tidak melakukan spam. Penggunaan yang tidak bertanggung jawab dapat menyebabkan akun Telegram diblokir atau dibanned. Pantau status scheduler, metrik dashboard, dan log pengiriman pesan. Untuk monitoring yang efektif, disarankan untuk: Dashboard Visualisasi : Mengembangkan dashboard yang komprehensif di frontend untuk memvisualisasikan status pengiriman pesan, aktivitas scheduler, dan statistik blacklist. Ini dapat mencakup grafik dan tabel yang menunjukkan tren dan anomali. Log Real-time : Mengimplementasikan pembaruan log secara real-time (misalnya, menggunakan WebSockets atau Server-Sent Events) untuk memantau kemajuan pengiriman pesan dan mengidentifikasi masalah dengan cepat. Peringatan Otomatis : Menyiapkan sistem peringatan untuk notifikasi otomatis jika ada kegagalan pengiriman pesan atau masalah scheduler. Untuk troubleshooting, log aplikasi dan status kesehatan API ( /health endpoint) dapat memberikan informasi penting. Proyek ini menggunakan SQLite sebagai database default. Skema database didefinisikan dalam backend/app/models.py dan mencakup tabel-tabel berikut: users : Menyimpan informasi pengguna, termasuk api_id , api_hash , phone_number , dan session_data (semuanya dienkripsi). messages : Menyimpan template pesan yang akan dikirim, termasuk title dan content . groups : Menyimpan daftar grup Telegram target, termasuk group_id , group_name , username , dan invite_link . blacklist : Menyimpan daftar grup yang dikecualikan dari pengiriman pesan, dengan group_id , blacklist_type , reason , dan expires_at . logs : Mencatat riwayat pengiriman pesan, termasuk group_id , message_id , status (success/failed/blacklisted), dan error_message . settings : Menyimpan pengaturan aplikasi per pengguna, seperti min_interval , max_interval , min_delay , dan max_delay untuk pengiriman pesan. Semua tabel memiliki kolom created_at dan updated_at untuk melacak waktu pembuatan dan pembaruan data. Jika Anda mengalami masalah atau membutuhkan bantuan, silakan: Periksa Log Aplikasi : Log aplikasi (yang dapat diakses melalui konsol backend) akan memberikan informasi detail tentang kesalahan atau peringatan yang terjadi. Gunakan Endpoint Kesehatan API : Akses endpoint /health (misalnya, http://127.0.0.1:8000/health ) untuk memeriksa status koneksi database dan scheduler. Buat Issue Baru : Jika masalah berlanjut, buat issue baru di repositori GitHub proyek dengan menyertakan detail masalah, langkah-langkah untuk mereproduksi, dan log yang relevan.","title":"Home"},{"location":"#telegram-automation-documentation","text":"Selamat datang di dokumentasi Telegram Automation! Aplikasi ini memungkinkan Anda untuk mengirim pesan otomatis ke grup-grup Telegram dengan penjadwalan yang fleksibel.","title":"Telegram Automation Documentation"},{"location":"#fitur-utama","text":"Manajemen Pesan : Buat dan kelola template pesan yang akan dikirim Manajemen Grup : Kelola daftar grup Telegram target Penjadwalan : Atur jadwal pengiriman pesan secara otomatis Blacklist : Kelola daftar grup yang dikecualikan dari pengiriman Autentikasi : Sistem login yang aman untuk mengakses aplikasi","title":"Fitur Utama"},{"location":"#arsitektur-aplikasi","text":"Aplikasi ini terdiri dari dua komponen utama: Backend (FastAPI) : API server yang menangani logika bisnis dan database Frontend (React) : Antarmuka pengguna untuk mengelola aplikasi","title":"Arsitektur Aplikasi"},{"location":"#dokumentasi","text":"Installation - Panduan instalasi dan setup Usage - Panduan penggunaan aplikasi Backend API Docs - Dokumentasi API backend yang detail","title":"Dokumentasi"},{"location":"#keamanan","text":"Aplikasi ini dirancang dengan mempertimbangkan keamanan data dan langkah-langkah anti-spam. Informasi lebih lanjut mengenai fitur keamanan dan privasi dapat ditemukan di sini.","title":"Keamanan"},{"location":"#monitoring","text":"Pantau status scheduler, metrik dashboard, dan log pengiriman pesan. Detail mengenai monitoring dan troubleshooting dapat ditemukan di sini.","title":"Monitoring"},{"location":"#skema-database","text":"Proyek ini menggunakan SQLite sebagai database default. Detail mengenai skema database dapat ditemukan di sini.","title":"Skema Database"},{"location":"#troubleshooting","text":"Jika Anda mengalami masalah atau membutuhkan bantuan, silakan lihat di sini atau buat issue baru di repositori GitHub. Aplikasi ini dirancang dengan mempertimbangkan keamanan data dan langkah-langkah anti-spam. Fitur keamanan utama meliputi enkripsi api_id , api_hash , dan phone_number pengguna. Untuk meningkatkan keamanan, disarankan untuk mengimplementasikan: Rate Limiting : Menerapkan pembatasan laju pada endpoint API untuk mencegah penyalahgunaan dan serangan brute-force. Validasi Input : Memastikan validasi input yang ketat pada semua endpoint API untuk mencegah serangan injeksi (misalnya, SQL injection, XSS). Two-Factor Authentication (2FA) : Jika aplikasi ini akan digunakan oleh banyak pengguna, pertimbangkan untuk menambahkan 2FA untuk lapisan keamanan tambahan pada proses login. Pengguna bertanggung jawab penuh untuk mematuhi Ketentuan Layanan Telegram dan tidak melakukan spam. Penggunaan yang tidak bertanggung jawab dapat menyebabkan akun Telegram diblokir atau dibanned. Pantau status scheduler, metrik dashboard, dan log pengiriman pesan. Untuk monitoring yang efektif, disarankan untuk: Dashboard Visualisasi : Mengembangkan dashboard yang komprehensif di frontend untuk memvisualisasikan status pengiriman pesan, aktivitas scheduler, dan statistik blacklist. Ini dapat mencakup grafik dan tabel yang menunjukkan tren dan anomali. Log Real-time : Mengimplementasikan pembaruan log secara real-time (misalnya, menggunakan WebSockets atau Server-Sent Events) untuk memantau kemajuan pengiriman pesan dan mengidentifikasi masalah dengan cepat. Peringatan Otomatis : Menyiapkan sistem peringatan untuk notifikasi otomatis jika ada kegagalan pengiriman pesan atau masalah scheduler. Untuk troubleshooting, log aplikasi dan status kesehatan API ( /health endpoint) dapat memberikan informasi penting. Proyek ini menggunakan SQLite sebagai database default. Skema database didefinisikan dalam backend/app/models.py dan mencakup tabel-tabel berikut: users : Menyimpan informasi pengguna, termasuk api_id , api_hash , phone_number , dan session_data (semuanya dienkripsi). messages : Menyimpan template pesan yang akan dikirim, termasuk title dan content . groups : Menyimpan daftar grup Telegram target, termasuk group_id , group_name , username , dan invite_link . blacklist : Menyimpan daftar grup yang dikecualikan dari pengiriman pesan, dengan group_id , blacklist_type , reason , dan expires_at . logs : Mencatat riwayat pengiriman pesan, termasuk group_id , message_id , status (success/failed/blacklisted), dan error_message . settings : Menyimpan pengaturan aplikasi per pengguna, seperti min_interval , max_interval , min_delay , dan max_delay untuk pengiriman pesan. Semua tabel memiliki kolom created_at dan updated_at untuk melacak waktu pembuatan dan pembaruan data. Jika Anda mengalami masalah atau membutuhkan bantuan, silakan: Periksa Log Aplikasi : Log aplikasi (yang dapat diakses melalui konsol backend) akan memberikan informasi detail tentang kesalahan atau peringatan yang terjadi. Gunakan Endpoint Kesehatan API : Akses endpoint /health (misalnya, http://127.0.0.1:8000/health ) untuk memeriksa status koneksi database dan scheduler. Buat Issue Baru : Jika masalah berlanjut, buat issue baru di repositori GitHub proyek dengan menyertakan detail masalah, langkah-langkah untuk mereproduksi, dan log yang relevan.","title":"Troubleshooting"},{"location":"backend_api_docs/","text":"Backend API Documentation Dokumentasi ini menjelaskan API endpoints yang tersedia di backend Telegram Automation, serta cara mengakses dokumentasi API interaktif dan dokumentasi kode internal. Akses Dokumentasi API Interaktif Backend Telegram Automation dibangun menggunakan FastAPI, yang secara otomatis menghasilkan dokumentasi API interaktif. Anda dapat mengakses dokumentasi ini melalui: Swagger UI Akses: http://127.0.0.1:8000/docs Swagger UI menyediakan antarmuka interaktif yang memungkinkan Anda untuk: - Melihat semua endpoint yang tersedia. - Memahami parameter yang diperlukan untuk setiap endpoint. - Menguji endpoint secara langsung dari browser Anda. - Melihat contoh respons (response) dari setiap endpoint. Redoc Akses: http://127.0.0.1:8000/redoc Redoc menyediakan tampilan dokumentasi API yang lebih bersih, terstruktur, dan mudah dibaca, dengan fitur-fitur seperti: - Tampilan yang ringkas dan navigasi yang intuitif. - Dokumentasi yang detail untuk setiap endpoint. Dokumentasi Kode Backend (Sphinx) Untuk dokumentasi kode backend yang lebih mendalam, termasuk docstrings, struktur internal modul, layanan, dan utilitas, Anda dapat merujuk pada dokumentasi Sphinx yang dihasilkan dari kode sumber. Dokumentasi ini sangat berguna bagi pengembang yang ingin memahami detail implementasi internal. Lokasi: backend/docs/build/html/index.html (setelah Anda membangun dokumentasi Sphinx). Dokumentasi Sphinx ini mencakup: - Dokumentasi untuk semua modul Python. - Docstrings dari fungsi dan kelas. - Struktur arsitektur backend. - Detail implementasi services dan utilities. Endpoint Utama Berikut adalah daftar ringkasan endpoint API utama yang disediakan oleh backend. Untuk detail lengkap mengenai parameter, tipe data, dan contoh respons, silakan gunakan Swagger UI atau Redoc. Authentication POST /auth/login : Melakukan login pengguna dengan kredensial. POST /auth/verify-code : Memverifikasi kode OTP yang diterima dari Telegram. POST /auth/verify-2fa : Memverifikasi Two-Factor Authentication (2FA) jika diaktifkan. GET /auth/status : Mendapatkan status autentikasi pengguna saat ini. Messages GET /messages : Mendapatkan daftar semua template pesan yang tersedia. POST /messages : Membuat template pesan baru. PUT /messages/{id} : Memperbarui template pesan berdasarkan ID. DELETE /messages/{id} : Menghapus template pesan berdasarkan ID. Groups GET /groups : Mendapatkan daftar semua grup target. POST /groups : Menambahkan grup baru. POST /groups/{id}/validate : Memvalidasi akses ke grup tertentu berdasarkan ID. Scheduler POST /scheduler/start : Memulai proses pengiriman pesan otomatis. POST /scheduler/stop : Menghentikan proses pengiriman pesan otomatis. GET /scheduler/status : Mendapatkan status scheduler saat ini (running/stopped). GET /scheduler/logs : Mendapatkan log riwayat pengiriman pesan. Settings GET /settings : Mendapatkan pengaturan aplikasi saat ini. PUT /settings : Memperbarui pengaturan aplikasi. Blacklist GET /blacklist : Mendapatkan daftar grup yang masuk daftar hitam (blacklist). POST /blacklist : Menambahkan grup ke daftar hitam. DELETE /blacklist/{id} : Menghapus grup dari daftar hitam berdasarkan ID.","title":"Backend API Docs"},{"location":"backend_api_docs/#backend-api-documentation","text":"Dokumentasi ini menjelaskan API endpoints yang tersedia di backend Telegram Automation, serta cara mengakses dokumentasi API interaktif dan dokumentasi kode internal.","title":"Backend API Documentation"},{"location":"backend_api_docs/#akses-dokumentasi-api-interaktif","text":"Backend Telegram Automation dibangun menggunakan FastAPI, yang secara otomatis menghasilkan dokumentasi API interaktif. Anda dapat mengakses dokumentasi ini melalui:","title":"Akses Dokumentasi API Interaktif"},{"location":"backend_api_docs/#swagger-ui","text":"Akses: http://127.0.0.1:8000/docs Swagger UI menyediakan antarmuka interaktif yang memungkinkan Anda untuk: - Melihat semua endpoint yang tersedia. - Memahami parameter yang diperlukan untuk setiap endpoint. - Menguji endpoint secara langsung dari browser Anda. - Melihat contoh respons (response) dari setiap endpoint.","title":"Swagger UI"},{"location":"backend_api_docs/#redoc","text":"Akses: http://127.0.0.1:8000/redoc Redoc menyediakan tampilan dokumentasi API yang lebih bersih, terstruktur, dan mudah dibaca, dengan fitur-fitur seperti: - Tampilan yang ringkas dan navigasi yang intuitif. - Dokumentasi yang detail untuk setiap endpoint.","title":"Redoc"},{"location":"backend_api_docs/#dokumentasi-kode-backend-sphinx","text":"Untuk dokumentasi kode backend yang lebih mendalam, termasuk docstrings, struktur internal modul, layanan, dan utilitas, Anda dapat merujuk pada dokumentasi Sphinx yang dihasilkan dari kode sumber. Dokumentasi ini sangat berguna bagi pengembang yang ingin memahami detail implementasi internal. Lokasi: backend/docs/build/html/index.html (setelah Anda membangun dokumentasi Sphinx). Dokumentasi Sphinx ini mencakup: - Dokumentasi untuk semua modul Python. - Docstrings dari fungsi dan kelas. - Struktur arsitektur backend. - Detail implementasi services dan utilities.","title":"Dokumentasi Kode Backend (Sphinx)"},{"location":"backend_api_docs/#endpoint-utama","text":"Berikut adalah daftar ringkasan endpoint API utama yang disediakan oleh backend. Untuk detail lengkap mengenai parameter, tipe data, dan contoh respons, silakan gunakan Swagger UI atau Redoc.","title":"Endpoint Utama"},{"location":"backend_api_docs/#authentication","text":"POST /auth/login : Melakukan login pengguna dengan kredensial. POST /auth/verify-code : Memverifikasi kode OTP yang diterima dari Telegram. POST /auth/verify-2fa : Memverifikasi Two-Factor Authentication (2FA) jika diaktifkan. GET /auth/status : Mendapatkan status autentikasi pengguna saat ini.","title":"Authentication"},{"location":"backend_api_docs/#messages","text":"GET /messages : Mendapatkan daftar semua template pesan yang tersedia. POST /messages : Membuat template pesan baru. PUT /messages/{id} : Memperbarui template pesan berdasarkan ID. DELETE /messages/{id} : Menghapus template pesan berdasarkan ID.","title":"Messages"},{"location":"backend_api_docs/#groups","text":"GET /groups : Mendapatkan daftar semua grup target. POST /groups : Menambahkan grup baru. POST /groups/{id}/validate : Memvalidasi akses ke grup tertentu berdasarkan ID.","title":"Groups"},{"location":"backend_api_docs/#scheduler","text":"POST /scheduler/start : Memulai proses pengiriman pesan otomatis. POST /scheduler/stop : Menghentikan proses pengiriman pesan otomatis. GET /scheduler/status : Mendapatkan status scheduler saat ini (running/stopped). GET /scheduler/logs : Mendapatkan log riwayat pengiriman pesan.","title":"Scheduler"},{"location":"backend_api_docs/#settings","text":"GET /settings : Mendapatkan pengaturan aplikasi saat ini. PUT /settings : Memperbarui pengaturan aplikasi.","title":"Settings"},{"location":"backend_api_docs/#blacklist","text":"GET /blacklist : Mendapatkan daftar grup yang masuk daftar hitam (blacklist). POST /blacklist : Menambahkan grup ke daftar hitam. DELETE /blacklist/{id} : Menghapus grup dari daftar hitam berdasarkan ID.","title":"Blacklist"},{"location":"installation/","text":"Panduan Instalasi Panduan ini akan memandu Anda melalui proses instalasi dan setup proyek Telegram Automation. Persyaratan Sistem Pastikan sistem Anda memenuhi persyaratan berikut: Python 3.9+ Node.js 18+ pnpm (direkomendasikan) atau npm atau yarn Git Langkah-langkah Instalasi Clone Repositori Buka terminal atau command prompt Anda dan jalankan perintah berikut untuk mengkloning repositori proyek: bash git clone https://github.com/dygje12/telegram-automation.git cd telegram-automation Setup Backend (FastAPI) Navigasi ke direktori backend dan instal dependensi Python: bash cd backend pip install -r requirements.txt Buat file .env di direktori backend dan tambahkan konfigurasi yang diperlukan (lihat backend/.env.example untuk contoh): ```dotenv Database DATABASE_URL=sqlite:///./telegram_automation.db Security SECRET_KEY=your-secret-key-here ENCRYPTION_KEY=your-encryption-key-here Server HOST=0.0.0.0 PORT=8000 DEBUG=False ``` Jalankan migrasi database (jika ada): ```bash Jika menggunakan Alembic untuk migrasi database alembic upgrade head ``` Jalankan aplikasi backend: bash uvicorn app.main:app --reload Backend akan berjalan di http://127.0.0.1:8000 secara default. Setup Frontend (React) Buka terminal baru, navigasi ke direktori frontend dan instal dependensi Node.js: ```bash cd ../frontend pnpm install atau npm install atau yarn install ``` Buat file .env di direktori frontend dan tambahkan konfigurasi yang diperlukan (lihat frontend/.env.example jika ada): dotenv VITE_API_BASE_URL=http://127.0.0.1:8000 Jalankan aplikasi frontend: ```bash pnpm run dev atau npm run dev atau yarn dev ``` Frontend akan berjalan di http://localhost:5173 secara default (sesuai vite.config.js ). Setelah semua langkah ini selesai, aplikasi Telegram Automation seharusnya sudah berjalan dan dapat diakses melalui browser Anda.","title":"Installation"},{"location":"installation/#panduan-instalasi","text":"Panduan ini akan memandu Anda melalui proses instalasi dan setup proyek Telegram Automation.","title":"Panduan Instalasi"},{"location":"installation/#persyaratan-sistem","text":"Pastikan sistem Anda memenuhi persyaratan berikut: Python 3.9+ Node.js 18+ pnpm (direkomendasikan) atau npm atau yarn Git","title":"Persyaratan Sistem"},{"location":"installation/#langkah-langkah-instalasi","text":"Clone Repositori Buka terminal atau command prompt Anda dan jalankan perintah berikut untuk mengkloning repositori proyek: bash git clone https://github.com/dygje12/telegram-automation.git cd telegram-automation Setup Backend (FastAPI) Navigasi ke direktori backend dan instal dependensi Python: bash cd backend pip install -r requirements.txt Buat file .env di direktori backend dan tambahkan konfigurasi yang diperlukan (lihat backend/.env.example untuk contoh): ```dotenv","title":"Langkah-langkah Instalasi"},{"location":"installation/#database","text":"DATABASE_URL=sqlite:///./telegram_automation.db","title":"Database"},{"location":"installation/#security","text":"SECRET_KEY=your-secret-key-here ENCRYPTION_KEY=your-encryption-key-here","title":"Security"},{"location":"installation/#server","text":"HOST=0.0.0.0 PORT=8000 DEBUG=False ``` Jalankan migrasi database (jika ada): ```bash","title":"Server"},{"location":"installation/#jika-menggunakan-alembic-untuk-migrasi-database","text":"","title":"Jika menggunakan Alembic untuk migrasi database"},{"location":"installation/#alembic-upgrade-head","text":"``` Jalankan aplikasi backend: bash uvicorn app.main:app --reload Backend akan berjalan di http://127.0.0.1:8000 secara default. Setup Frontend (React) Buka terminal baru, navigasi ke direktori frontend dan instal dependensi Node.js: ```bash cd ../frontend pnpm install","title":"alembic upgrade head"},{"location":"installation/#atau","text":"","title":"atau"},{"location":"installation/#npm-install","text":"","title":"npm install"},{"location":"installation/#atau_1","text":"","title":"atau"},{"location":"installation/#yarn-install","text":"``` Buat file .env di direktori frontend dan tambahkan konfigurasi yang diperlukan (lihat frontend/.env.example jika ada): dotenv VITE_API_BASE_URL=http://127.0.0.1:8000 Jalankan aplikasi frontend: ```bash pnpm run dev","title":"yarn install"},{"location":"installation/#atau_2","text":"","title":"atau"},{"location":"installation/#npm-run-dev","text":"","title":"npm run dev"},{"location":"installation/#atau_3","text":"","title":"atau"},{"location":"installation/#yarn-dev","text":"``` Frontend akan berjalan di http://localhost:5173 secara default (sesuai vite.config.js ). Setelah semua langkah ini selesai, aplikasi Telegram Automation seharusnya sudah berjalan dan dapat diakses melalui browser Anda.","title":"yarn dev"},{"location":"usage/","text":"Panduan Penggunaan Panduan ini akan menjelaskan cara menggunakan aplikasi Telegram Automation untuk mengirim pesan otomatis ke grup-grup Telegram. Login ke Aplikasi Buka browser dan akses alamat frontend aplikasi Anda (biasanya http://localhost:5173 jika dijalankan secara lokal). Masukkan API ID, API Hash, dan nomor telepon Telegram Anda. Masukkan kode verifikasi yang Anda terima dari Telegram. Jika Anda mengaktifkan Two-Factor Authentication (2FA), masukkan password 2FA Anda. Klik tombol \"Login\" untuk masuk ke dashboard. Mengelola Pesan Membuat Pesan Baru Navigasi ke halaman \"Messages\" di dashboard. Klik tombol \"Add New Message\" atau yang serupa. Masukkan konten pesan yang ingin Anda kirim. Anda dapat menggunakan variabel dinamis jika didukung. Klik \"Save\" untuk menyimpan pesan. Mengedit Pesan Di halaman \"Messages\", cari pesan yang ingin diubah dan klik tombol \"Edit\" atau ikon pensil. Ubah konten pesan sesuai kebutuhan Anda. Klik \"Save\" untuk menyimpan perubahan. Menghapus Pesan Di halaman \"Messages\", cari pesan yang ingin dihapus dan klik tombol \"Delete\" atau ikon tempat sampah. Konfirmasi penghapusan jika diminta. Mengelola Grup Menambah Grup Baru Navigasi ke halaman \"Groups\" di dashboard. Klik tombol \"Add New Group\" atau yang serupa. Masukkan informasi grup, seperti username grup atau tautan undangan. Sistem akan memvalidasi akses grup secara otomatis. Klik \"Save\" untuk menyimpan grup. Mengedit Grup Di halaman \"Groups\", cari grup yang ingin diubah dan klik tombol \"Edit\" atau ikon pensil. Ubah informasi grup sesuai kebutuhan Anda. Klik \"Save\" untuk menyimpan perubahan. Menghapus Grup Di halaman \"Groups\", cari grup yang ingin dihapus dan klik tombol \"Delete\" atau ikon tempat sampah. Konfirmasi penghapusan jika diminta. Penjadwalan Pesan Memulai Otomasi Navigasi ke halaman \"Scheduler\" di dashboard. Pastikan Anda telah menyiapkan pesan dan grup target. Klik tombol \"Start\" untuk memulai proses pengiriman pesan otomatis. Anda dapat memantau progress pengiriman di Dashboard. Menghentikan Otomasi Di halaman \"Scheduler\", klik tombol \"Stop\" untuk menghentikan proses pengiriman pesan otomatis. Mengelola Blacklist Menambah Grup ke Blacklist Navigasi ke halaman \"Blacklist\" di dashboard. Klik tombol \"Add to Blacklist\" atau yang serupa. Pilih grup yang ingin ditambahkan ke blacklist. Grup yang ada di blacklist tidak akan menerima pesan otomatis meskipun termasuk dalam jadwal pengiriman. Klik \"Save\" untuk menyimpan. Menghapus Grup dari Blacklist Di halaman \"Blacklist\", cari grup yang ingin dihapus dari blacklist dan klik tombol \"Delete\" atau ikon tempat sampah. Konfirmasi penghapusan jika diminta. Tips Penggunaan Pastikan untuk menguji pesan Anda terlebih dahulu sebelum menjadwalkan pengiriman massal. Gunakan fitur blacklist untuk mengecualikan grup-grup tertentu dari pengiriman otomatis. Periksa log aktivitas secara berkala untuk memastikan pesan terkirim dengan baik dan untuk troubleshooting. Sesuaikan pengaturan interval pengiriman di bagian \"Settings\" untuk menghindari deteksi spam oleh Telegram.","title":"Usage"},{"location":"usage/#panduan-penggunaan","text":"Panduan ini akan menjelaskan cara menggunakan aplikasi Telegram Automation untuk mengirim pesan otomatis ke grup-grup Telegram.","title":"Panduan Penggunaan"},{"location":"usage/#login-ke-aplikasi","text":"Buka browser dan akses alamat frontend aplikasi Anda (biasanya http://localhost:5173 jika dijalankan secara lokal). Masukkan API ID, API Hash, dan nomor telepon Telegram Anda. Masukkan kode verifikasi yang Anda terima dari Telegram. Jika Anda mengaktifkan Two-Factor Authentication (2FA), masukkan password 2FA Anda. Klik tombol \"Login\" untuk masuk ke dashboard.","title":"Login ke Aplikasi"},{"location":"usage/#mengelola-pesan","text":"","title":"Mengelola Pesan"},{"location":"usage/#membuat-pesan-baru","text":"Navigasi ke halaman \"Messages\" di dashboard. Klik tombol \"Add New Message\" atau yang serupa. Masukkan konten pesan yang ingin Anda kirim. Anda dapat menggunakan variabel dinamis jika didukung. Klik \"Save\" untuk menyimpan pesan.","title":"Membuat Pesan Baru"},{"location":"usage/#mengedit-pesan","text":"Di halaman \"Messages\", cari pesan yang ingin diubah dan klik tombol \"Edit\" atau ikon pensil. Ubah konten pesan sesuai kebutuhan Anda. Klik \"Save\" untuk menyimpan perubahan.","title":"Mengedit Pesan"},{"location":"usage/#menghapus-pesan","text":"Di halaman \"Messages\", cari pesan yang ingin dihapus dan klik tombol \"Delete\" atau ikon tempat sampah. Konfirmasi penghapusan jika diminta.","title":"Menghapus Pesan"},{"location":"usage/#mengelola-grup","text":"","title":"Mengelola Grup"},{"location":"usage/#menambah-grup-baru","text":"Navigasi ke halaman \"Groups\" di dashboard. Klik tombol \"Add New Group\" atau yang serupa. Masukkan informasi grup, seperti username grup atau tautan undangan. Sistem akan memvalidasi akses grup secara otomatis. Klik \"Save\" untuk menyimpan grup.","title":"Menambah Grup Baru"},{"location":"usage/#mengedit-grup","text":"Di halaman \"Groups\", cari grup yang ingin diubah dan klik tombol \"Edit\" atau ikon pensil. Ubah informasi grup sesuai kebutuhan Anda. Klik \"Save\" untuk menyimpan perubahan.","title":"Mengedit Grup"},{"location":"usage/#menghapus-grup","text":"Di halaman \"Groups\", cari grup yang ingin dihapus dan klik tombol \"Delete\" atau ikon tempat sampah. Konfirmasi penghapusan jika diminta.","title":"Menghapus Grup"},{"location":"usage/#penjadwalan-pesan","text":"","title":"Penjadwalan Pesan"},{"location":"usage/#memulai-otomasi","text":"Navigasi ke halaman \"Scheduler\" di dashboard. Pastikan Anda telah menyiapkan pesan dan grup target. Klik tombol \"Start\" untuk memulai proses pengiriman pesan otomatis. Anda dapat memantau progress pengiriman di Dashboard.","title":"Memulai Otomasi"},{"location":"usage/#menghentikan-otomasi","text":"Di halaman \"Scheduler\", klik tombol \"Stop\" untuk menghentikan proses pengiriman pesan otomatis.","title":"Menghentikan Otomasi"},{"location":"usage/#mengelola-blacklist","text":"","title":"Mengelola Blacklist"},{"location":"usage/#menambah-grup-ke-blacklist","text":"Navigasi ke halaman \"Blacklist\" di dashboard. Klik tombol \"Add to Blacklist\" atau yang serupa. Pilih grup yang ingin ditambahkan ke blacklist. Grup yang ada di blacklist tidak akan menerima pesan otomatis meskipun termasuk dalam jadwal pengiriman. Klik \"Save\" untuk menyimpan.","title":"Menambah Grup ke Blacklist"},{"location":"usage/#menghapus-grup-dari-blacklist","text":"Di halaman \"Blacklist\", cari grup yang ingin dihapus dari blacklist dan klik tombol \"Delete\" atau ikon tempat sampah. Konfirmasi penghapusan jika diminta.","title":"Menghapus Grup dari Blacklist"},{"location":"usage/#tips-penggunaan","text":"Pastikan untuk menguji pesan Anda terlebih dahulu sebelum menjadwalkan pengiriman massal. Gunakan fitur blacklist untuk mengecualikan grup-grup tertentu dari pengiriman otomatis. Periksa log aktivitas secara berkala untuk memastikan pesan terkirim dengan baik dan untuk troubleshooting. Sesuaikan pengaturan interval pengiriman di bagian \"Settings\" untuk menghindari deteksi spam oleh Telegram.","title":"Tips Penggunaan"}]}